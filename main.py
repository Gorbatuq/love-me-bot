import asyncio
import json
import random
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart

# üîê –¢–í–û–á –î–ê–ù–Ü
BOT_TOKEN = "8130153292:AAE1uS6TkFGgOZyXdppz_Li_1RiAL_7C5o0"
# üì≤ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å —ñ–∑ JSON-—Ñ–∞–π–ª—É
with open("questions.json", "r", encoding="utf-8") as f:
    all_questions = json.load(f)

# üß† FSM


class TestState(StatesGroup):
    current_question = State()
    answers = State()
    selected_questions = State()


# üóÇ –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
user_results = {}  # user_id: {"history": ["62%", "71%", "99%"]}

# üìã –ú–µ–Ω—é
menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üöÄ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")],
    [InlineKeyboardButton(text="üìä –ú–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                          callback_data="show_results")],
    [InlineKeyboardButton(text="üí° –ü—ñ–¥–∫–∞–∑–∫–∏ –ø–æ –µ–∫—Å–ø–ª–∞–∞—Ç–∞—Ü—ñ—ó",
                          callback_data="show_tips")]
])

# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞ /start


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await bot.send_photo(
        chat_id=message.chat.id,
        # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ñ–∞–π–ª –∞–±–æ —à–ª—è—Ö
        photo=types.FSInputFile("menu_image.png"),
        caption="‚ù§Ô∏è –¶–µ —Ç–µ—Å—Ç –Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ –ú—É–ª—è—Ä–æ–º –°–µ—Ä–≥—ñ—î–º.\n"
                "–í —Ç–µ—Å—Ç—ñ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –∑–Ω–∞–Ω–Ω—è –π–æ–≥–æ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ —ñ –ø—Ä–æ –Ω—å–æ–≥–æ —Å–∞–º–æ–≥–æ. –©–∞—Å—Ç–∏!!!"
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏
    await message.answer("üëá –í–∏–±–∏—Ä–∞–π:", reply_markup=menu_keyboard)
# ‚òëÔ∏è –ú–µ–Ω—é –≤–∏–±—ñ—Ä


@router.callback_query(lambda c: c.data in ["start_test", "show_results", "show_tips"])
async def handle_menu(callback: CallbackQuery, state: FSMContext):
    if callback.data == "start_test":
        await state.clear()
        selected = random.sample(all_questions, 10)
        await state.set_state(TestState.current_question)
        await state.update_data(answers=[], current=0, selected_questions=selected)
        await send_question(callback.message.chat.id, 0, state)

    elif callback.data == "show_results":
        history = user_results.get(
            callback.from_user.id, {}).get("history", [])
        if history:
            formatted = "\n".join(
                [f"{i+1}. {res}" for i, res in enumerate(history)])
            await callback.message.answer(f"<b>–û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:</b>\n{formatted}", parse_mode=ParseMode.HTML)
        else:
            await callback.message.answer("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç ‚ú®")

    elif callback.data == "show_tips":
        tips = (
            "‚ù§Ô∏è –î–æ–ª–±–∏ –π–æ–≥–æ –≤ –¥—å–æ—Å–Ω–∞ —è–∫ –¥–∏–∫–∞ –±—ñ–ª–∫–∞.\n"
            "üìû –ù–µ –∑–ª–∏ —Ü—å–æ–≥–æ –∫—Ä–∞—Å—É–Ω—á–∏–∫–∞.\n"
            "üé≠ –ì—Ä–∞–π—Å—è, –∞–ª–µ –Ω–µ –∑ –±—É–±–µ–Ω—á–∏–∫–∞–º–∏...\n"
            "üçù –ì–æ–¥—É–π.(–ª–æ—Ç–æ–∫ –∫—É–ø–∏–ª–∞?).\n"
            "üß† –Ü –≥–æ–ª–æ–≤–Ω–µ ‚Äî –Ω–µ –∑–∞–±—É–≤–∞–π –∫–∞–π—Ñ—É–≤–∞—Ç–∏."
        )
        await callback.message.answer(tips)

    await callback.answer()

# ‚ùì –ü–æ–∫–∞–∑ –ø–∏—Ç–∞–Ω–Ω—è


async def send_question(chat_id, index, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected_questions", [])
    q = selected[index]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=opt["text"], callback_data=f"answer_{index}_{i}")]
        for i, opt in enumerate(q["options"])
    ])
    await bot.send_message(chat_id, f"{index+1}/10: {q['text']}", reply_markup=keyboard)
    await state.set_state(TestState.current_question)
    await state.update_data(current=index)

# ‚úÖ –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ


@router.callback_query(lambda c: c.data and c.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    question_index = int(parts[1])
    option_index = int(parts[2])

    data = await state.get_data()
    answers = data.get("answers", [])
    selected = data.get("selected_questions", [])
    answer_obj = selected[question_index]["options"][option_index]
    score = answer_obj.get("score", 0)

    answers.append(score)
    await state.update_data(answers=answers)
    await callback.message.delete()

    if question_index + 1 < len(selected):
        await send_question(callback.message.chat.id, question_index + 1, state)
    else:
        await show_result(callback.message.chat.id, answers, callback.from_user.id)

    await callback.answer()

# üéØ –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É


async def show_result(chat_id, answers, user_id):
    total_score = sum(answers)
    percent = min(100, int(total_score * 100 / (10 * 10)))
    bar = int(percent / 10) * "‚ñà" + (10 - int(percent / 10)) * "‚ñë"

    if percent >= 90:
        result_phrase = "–ë–µ–π–±—ñ —è —É–∂–µ —Å—Ç–æ—é –¥–∏–±–æ–º!!!"
    elif percent >= 70:
        result_phrase = "–á–±–∞—Ç—å —É–∂–µ –∂–∞—Ö–∞—î —Ç—Ä–æ—Ö–∏ –≤—ñ–¥ —Ç–∞–∫–æ–≥–æ –∫–æ–Ω–µ–∫—Ç–∞"
    elif percent >= 50:
        result_phrase = "–Ñ —Ö—ñ–º—ñ—è. –ê–ª–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—á–∏—Ç–∞—Ç–∏ –±—ñ–æ–ª–æ–≥—ñ—é."
    elif percent >= 30:
        result_phrase = "–ö—Ä–∞—â–µ, –Ω—ñ–∂ –Ω—ñ—á–æ–≥–æ..."
    else:
        result_phrase = "–¶–µ —Ç–æ–∫—Å–∏—á–Ω–∏–π —ñ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π –º—ñ–∫—Å. –ú–æ–∂–µ, —Ü–µ –π —î –ª—é–±–æ–≤."

    text = f"<b>–¢–µ—Å—Ç –ø–æ–∫–∑—É—î —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å: {percent}%</b>\n{bar}\n\n{result_phrase}"

    history = user_results.get(user_id, {}).get("history", [])
    history = ([f"{percent}%"] + history)[:3]
    user_results[user_id] = {"history": history, "text": text}

    await bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, reply_markup=menu_keyboard)

# üöÄ –ó–∞–ø—É—Å–∫


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
